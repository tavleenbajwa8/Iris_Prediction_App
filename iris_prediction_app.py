# -*- coding: utf-8 -*-
"""Iris_Prediction_App

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lZ7XzlgAivY21ULO1ZchDFtVf4qc_QLP
"""

#!pip install streamlit

import streamlit as st
import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.ensemble import RandomForestClassifier

#Page configuration app

st.set_page_config(page_title='Iris Prediction App',
                   layout='wide',
                   initial_sidebar_state='expanded')

# App title 

st.title('Iris Prediction App')

df = pd.read_csv('https://gist.githubusercontent.com/curran/a08a1080b88344b0c8a7/raw/0e7a9b0a5d22642a06d3d5b9bcbad9890c8ee534/iris.csv')

#df

#Adding Widgets for Input features

st.sidebar.subheader('Input features')
sepal_length = st.sidebar.slider('Sepal length', 4.3, 7.9, 5.8)
sepal_width = st.sidebar.slider('Sepal width', 2.0, 4.4, 3.1)
petal_length = st.sidebar.slider('Petal length', 1.0, 6.9, 3.8)
petal_width = st.sidebar.slider('Petal width', 0.1, 2.5, 1.2)

#Extracting independent and dependent features 
#Here depending feature is species

df = df.sample(frac = 1)
X = df.iloc[:,:-1]  #Independent features
y = df.iloc[:,-1] #Dependent feature

#Test-Train Split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Model building 

model = RandomForestClassifier(max_depth=2, max_features=4, n_estimators=200, random_state=42)

model.fit(X_train, y_train)

#Making Predictions using model

y_pred = model.predict([[sepal_length, sepal_width, petal_length, petal_width]])

#Printing Exploratory Data Analysis

st.subheader('Exploratory Data Analyis')
st.write('The data is grouped by the class and the variable mean is computed for each class.')
groupby_species_mean = df.groupby('species').mean()
st.write(groupby_species_mean)
st.line_chart(groupby_species_mean.T)

# Print input features
st.subheader('Input features')
input_feature = pd.DataFrame([[sepal_length, sepal_width, petal_length, petal_width]],
                            columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'])
st.write(input_feature)

# Print prediction output
st.subheader('Output')
st.metric('Predicted class', y_pred[0], '')

